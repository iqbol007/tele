{"version":3,"sources":["components/Tariff.js","components/TariffList.js","App.js","serviceWorker.js","index.js"],"names":["Tariff","tele","className","isHit","name","price","minLim","description","trafficSize","TariffList","nextId","tariffs","id","unlim","hitImg","socialUnlim","socialImgUrl","canTune","imgBack","map","o","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2NAEe,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAG/B,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,OAAOD,EAAKE,OAAS,yBAAKD,UAAU,aAAnD,KACA,yBAAKA,UAAU,UAAUD,EAAKG,MAClC,yBAAKF,UAAU,OALD,UAMd,yBAAKA,UAAU,OAPD,yCAQV,yBAAKA,UAAU,WAAWD,EAAKI,OAC/B,2BAAOH,UAAU,QACf,+EADF,uFAGA,yBAAKA,UAAU,UACb,2BAAID,EAAKK,QADX,uBAGA,2BAAOJ,UAAU,YAAYD,EAAKM,aAClC,yBAAKL,UAAU,WACb,2BAAID,EAAKO,aADX,uEAGA,yBAAKN,UAAU,cACf,4BAAQA,UAAU,MAAlB,yCCpBS,SAASO,IACtB,IAAIC,EAAS,EACPC,EAAU,CACd,CACEC,GAAIF,IACJN,KAAM,2DACNC,MAAO,IACPE,YAAa,uJACbM,OAAO,EACPV,OAAO,EACPW,OAAO,wDACPR,OAAQ,IACRE,YAAa,GACbO,aAAa,EACbC,aAAa,wDACbC,SAAS,EACTC,QAAQ,mBAEV,CACEN,GAAIF,IACJN,KAAM,sEACNC,MAAO,IACPE,YAAa,uJACbM,OAAO,EACPV,OAAO,EACPW,OAAO,wDACPR,OAAO,IACPE,YAAa,GACbO,aAAa,EACbC,aAAa,wDACbC,SAAS,EACTC,QAAQ,mBAEV,CACEN,GAAIF,IACJN,KAAM,0DACNC,MAAO,IACPE,YAAa,kPACbM,OAAO,EACPV,OAAO,EACPW,OAAO,wDACPR,OAAO,IACPE,YAAa,GACbO,aAAa,EACbC,aAAa,wDACbC,SAAS,EACTC,QAAQ,oBAGZ,OAAO,yBAAKhB,UAAU,UAAUS,EAAQQ,KAAI,SAAAC,GAAC,OAAE,kBAACpB,EAAD,CAASqB,IAAKD,EAAER,GAAIX,KAAMmB,QCxC5DE,MARf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAACO,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b610e0ef.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Tariff({ tele }) {\n    const mon = '/Месясц';\n    const rub = '₽';\n  return (\n    <div className=\"item\">\n      <div className=\"hit\">{tele.isHit && <div className=\"hit-icon\"></div>} </div>\n      <div className=\"t-name\">{tele.name}</div>\n  <div className=\"rub\">{rub}</div>\n  <div className=\"mon\">{mon}</div>\n      <div className=\"t-price\">{tele.price}</div>\n      <small className=\"text\">\n        <b>безлимит</b> на Теле2 в России\n      </small>\n      <div className=\"t-time\">\n        <b>{tele.minLim}</b>мин.\n      </div>\n      <small className=\"descript\">{tele.description}</small>\n      <div className=\"tr-size\">\n        <b>{tele.trafficSize}</b>ГБ интернета\n      </div>\n      <div className=\"img-icons\"></div>\n      <button className=\"by\">Купить</button>\n        \n    </div>\n  );\n}\n","import React from \"react\";\nimport Tariff from \"./Tariff\";\n\nexport default function TariffList() {\n  let nextId = 1;\n  const tariffs = [\n    {\n      id: nextId++,\n      name: \"Мой онлайн+\",\n      price: 700,\n      description: \"на остальные номера в Росиии\",\n      unlim: true,\n      isHit: false,\n      hitImg:'https://msk.tele2.ru/api/media/asset?mediaId=m1310027',\n      minLim: 800,\n      trafficSize: 30,\n      socialUnlim: true,\n      socialImgUrl:'https://msk.tele2.ru/api/media/asset?mediaId=m1990041',\n      canTune: true,\n      imgBack:'./imgback/1.png'\n    },\n    {\n      id: nextId++,\n      name: \"Везде онлайн\",\n      price: 500,\n      description: \"на остальные номера в Росиии\",\n      unlim: true,\n      isHit: true,\n      hitImg:'https://msk.tele2.ru/api/media/asset?mediaId=m1310027',\n      minLim:500,\n      trafficSize: 40,\n      socialUnlim: true,\n      socialImgUrl:'https://msk.tele2.ru/api/media/asset?mediaId=m1990041',\n      canTune: false,\n      imgBack:'./imgback/2.png'\n    },\n    {\n      id: nextId++,\n      name: \"Мой онлайн\",\n      price: 400,\n      description: \"на другие мобильные номера домашнего региона\",\n      unlim: true,\n      isHit: false,\n      hitImg:'https://msk.tele2.ru/api/media/asset?mediaId=m1310027',\n      minLim:500,\n      trafficSize: 15,\n      socialUnlim: true,\n      socialImgUrl:'https://msk.tele2.ru/api/media/asset?mediaId=m1990041',\n      canTune: true,\n      imgBack:'./imgback/3.png'\n    }\n  ];\n  return <div className=\"tariff\">{tariffs.map(o=><Tariff  key={o.id} tele={o}/>)}</div>;\n}\n","import React from 'react';\nimport './App.css';\nimport TariffList from './components/TariffList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TariffList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}